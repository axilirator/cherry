{
  "name": "cayman",
  "version": "1.0.1",
  "description": "Simple CLI library",
  "main": "cayman.js",
  "directories": {
    "example": "example"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/axilirator/cayman.git"
  },
  "keywords": [
    "cli",
    "console",
    "options",
    "key",
    "parser"
  ],
  "scripts": {
    "test": "node ./test/test.js"
  },
  "author": {
    "name": "Яницкий Вадим"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/axilirator/cayman/issues"
  },
  "homepage": "https://github.com/axilirator/cayman",
  "readme": "Cayman\n======\n\nCayman позволяет быстро и просто создавать интерфейс командной строки \nдля программ, написанных на базе Node.js.\n\n## С чего начать?\n\t\n  Загрузите модуль из репозитория npm:\n\n\t$ npm install cayman\n\n  Затем подключите библиотеку к основному исполняемому \n  файлу вашего проекта:\n\n```js\n#!/usr/bin/env node\n\nvar cli = require( 'cayman' );\n```\n\n  Готово!\n\n## Синтаксис\n\n  Вы получаете объект, позволяющий вызывать собственные методы \n  в виде логических цепочек, аналогично цепочкам вызовов в jQuery.\n  Рассмотрим пример:\n\n```js\n#!/usr/bin/env node\n\nvar cli = require( './cayman.js' );\n\ncli\n\t.meta( <...> )\n\t.meta( <...> )\n\t.option( <...> )\n\n\t.parse( process.argv );\n```\n\n## Описание программы\n\n  Описание содержит основные сведения о программе, такие-как название, \n  версия, сведения об авторе, и всегда отображаться в самом начале вывода \n  программы. Любой элемент описания является полем метаданных и задается с \n  помощью функции meta:\n\n```js\ncli.meta( <свойство>, <значение> );\n```\n  Доступные свойства:\n\n- **name** - название программы,\n- **version** - версия,\n- **usage** - синтаксис параметров,\n- **copyright** - сведения об авторе,\n- **license** - используемая лицензия,\n- **url** - ссылка на сайт программы.\n\n## Опции\n\n  Опции позволяют при вызове программы передать ей некоторые параметры.\n  Вы можете создавать как глобальные, так и локальные опции. Глобальные \n  опции обрабатываются всеми командами, локальные же только той командой, \n  к которой они привязаны. Опция, описанная до первого описания команды, \n  считается глобальной, остальные будут привязаны к своим командам.\n\n  Синтаксис описания опции:\n\n```js\ncli\n\t.option({\n\t\t'short_name'  : <буква ключа, например: A, l>,\n\t\t'full_name'   : <название параметра для полной формы --name>,\n\t\t'access_name' : <название параметра в результирующем объекте>,\n\t\t'description' : <описание для справки>\n\t});\n```\n\n## Команды\n\n  Одна программа может выполнять несколько различных действий. \n  Для каждого из них могут быть привязаны свои команды:\n\n```js\ncli\n\t.command( <название>, <описание для справки> )\n\t\t// Локальные опции //\n\t\t.option({\n\t\t\t'short_name'  : <буква ключа, например: A, l>,\n\t\t\t'full_name'   : <название параметра для полной формы --name>,\n\t\t\t'access_name' : <название параметра в результирующем объекте>,\n\t\t\t'description' : <описание для справки>\n\t\t})\n\n\t\t// Действия, выполняемые командой //\n\t\t.action(function( argv ){\n\t\t\t// Do something... //\n\t\t})\n```\n  Функция, переданная в качестве аргумента action, получит \n  объект параметров в формате:\n```js\n{\n\t'параметр 1': 'значение 1',\n\t'параметр 2': 'значение 2',\n\t// ... //\n\t'параметр N': 'значение N',\n}\n```\n  Контекстом вызова функции будет являться объект cli.\n\n## Метод parse\n  \n  Данный метод завершает описание интерфейса командной строки \n  и выполняет парсинг переданных программе опций в объект cli.argv. \n  Затем выполняется указанная при вызове программы команда. Синтаксис \n  метода parse:\n\n```js\ncli.parse( <массив переданных опций, обычно process.argv> );\n```\n\n## Инфраструктура объекта cli\n  \n  При выполнении определенной команды можно обратиться к объекту \n  cli с помощью ключевого сова this. Что здесь есть:\n\n- **info** - информация о программе, описанная с помощью функции meta;\n- **commands** - описанные команды и их локальные опции;\n- **options** - массив глобальных опций;\n- **argv** - результирующий объект парсинга;\n- **header()** - выводит заголовок программы;\n- **help()** - выводит справку.\n\n## Справка программы\n\n  По умолчанию в любой создаваемой программе уже определена одна \n  стандартная команда, которая выводит справку. Также справка \n  отображается в случае отсутствия команды при вызове программы.\n\n  Справку можно вывести в любой момент, используя метод cli.help().\n  Есть возможность изменить стандартное представление справки и выводить \n  ее в нужном формате без изменения исходных кодов cayman.\n  Для этого необходимо до вызова функции parse переопределить метод \n  help:\n\n```js\ncli.help = function() {\n\t// New help function... //\n};\n\n// Something else... //\n\ncli.parse( process.argv );\n```\n\n## Пример\n\n```js\n#!/usr/bin/env node\n\nvar cli = require( './cayman.js' );\n\ncli\n\t// Метаданные //\n\t.meta( 'name',      'cherry' )\n\t.meta( 'version',   '0.0.1-beta' )\n\t.meta( 'copyright', '(C) 2014-2015 WMN' )\n\t.meta( 'url',       'https://github.com/axilirator/cherry' )\n\t.meta( 'license',   'This code is distributed under the GNU GPL v3.0' )\n\n\t// Глобальные опции //\n\t.option({\n\t\t'short_name'  : 's',\n\t\t'full_name'   : 'secret',\n\t\t'access_name' : 'server_secret',\n\t\t'description' : 'passphrase for authentication'\n\t})\n\n\t// Команды //\n\t.command( 'begin', 'do something' )\n\t\t// Локальные опции //\n\t\t.option({\n\t\t\t'short_name'  : 'i',\n\t\t\t'full_name'   : 'server-ip',\n\t\t\t'access_name' : 'server_ip',\n\t\t\t'description' : 'server\\'s IP'\n\t\t})\n\n\t\t// Действие команды //\n\t\t.action(function( argv ){\n\t\t\t// Do something... //\n\t\t\t// this ссылается на cli //\n\n\t\t\t// argv.server_ip является параметром, который можно \n\t\t\t// задать как в виде ключа -i <IP>, так и полностью\n\t\t\t// --server-ip <IP>\n\n\t\t\t// Параметр, не имеющий значения, получит значение true\n\t\t})\n\t.parse( process.argv );\n```",
  "readmeFilename": "README.md",
  "gitHead": "048673524f95184231c0fd938e426774d43d2876",
  "_id": "cayman@1.0.1",
  "_shasum": "3fecf504ba05ba9214c2a3fb495285c00b994b15",
  "_from": "cayman@*"
}
